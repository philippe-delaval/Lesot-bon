#!/bin/bash

# Script de correction d'erreur 500 Laravel Cloud
# Usage: bash fix-laravel-cloud-500.sh

set -e

echo "üîß Script de correction erreur 500 - Laravel Cloud"
echo "=================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo
    echo -e "${BLUE}=== $1 ===${NC}"
}

# √âTAPE 1: V√©rification de l'environnement
print_step "√âTAPE 1: V√©rification de l'environnement"

print_status "V√©rification du r√©pertoire courant..."
pwd
ls -la

print_status "V√©rification des fichiers Laravel..."
if [ -f "artisan" ]; then
    print_success "Fichier artisan trouv√©"
else
    print_error "Fichier artisan non trouv√© - v√©rifiez le r√©pertoire"
    exit 1
fi

# √âTAPE 2: V√©rification de la configuration .env
print_step "√âTAPE 2: V√©rification de la configuration .env"

if [ -f ".env" ]; then
    print_success "Fichier .env trouv√©"
    print_status "Configuration actuelle:"
    echo "APP_ENV=$(grep '^APP_ENV=' .env | cut -d'=' -f2)"
    echo "APP_DEBUG=$(grep '^APP_DEBUG=' .env | cut -d'=' -f2)"
    echo "DB_CONNECTION=$(grep '^DB_CONNECTION=' .env | cut -d'=' -f2)"
    echo "DB_HOST=$(grep '^DB_HOST=' .env | cut -d'=' -f2)"
    echo "DB_DATABASE=$(grep '^DB_DATABASE=' .env | cut -d'=' -f2)"
else
    print_error "Fichier .env non trouv√©"
    if [ -f ".env.example" ]; then
        print_status "Copie de .env.example vers .env..."
        cp .env.example .env
        print_warning "Configurez maintenant votre .env avec les bonnes valeurs"
    fi
    exit 1
fi

# √âTAPE 3: Activation temporaire du debug
print_step "√âTAPE 3: Activation temporaire du debug"

print_status "Activation du mode debug pour diagnostic..."
sed -i 's/APP_DEBUG=false/APP_DEBUG=true/g' .env
print_success "Mode debug activ√©"

# √âTAPE 4: Nettoyage des caches
print_step "√âTAPE 4: Nettoyage des caches Laravel"

print_status "Nettoyage du cache de configuration..."
php artisan config:clear || print_warning "√âchec config:clear"

print_status "Nettoyage du cache des routes..."
php artisan route:clear || print_warning "√âchec route:clear"

print_status "Nettoyage du cache des vues..."
php artisan view:clear || print_warning "√âchec view:clear"

print_status "Nettoyage optimisation g√©n√©rale..."
php artisan optimize:clear || print_warning "√âchec optimize:clear"

print_success "Caches nettoy√©s"

# √âTAPE 5: Test de connexion base de donn√©es
print_step "√âTAPE 5: Test de connexion base de donn√©es"

print_status "Test de connexion PostgreSQL..."
php artisan tinker --execute="
try {
    \$pdo = DB::connection()->getPdo();
    echo 'Connexion DB: SUCCESS' . PHP_EOL;
    echo 'Driver: ' . \$pdo->getAttribute(PDO::ATTR_DRIVER_NAME) . PHP_EOL;
    echo 'Version: ' . \$pdo->getAttribute(PDO::ATTR_SERVER_VERSION) . PHP_EOL;
} catch (Exception \$e) {
    echo 'Connexion DB: FAILED - ' . \$e->getMessage() . PHP_EOL;
    exit(1);
}
"

if [ $? -eq 0 ]; then
    print_success "Connexion base de donn√©es OK"
else
    print_error "√âchec de connexion √† la base de donn√©es"
    print_status "V√©rifiez vos param√®tres DB dans .env"
    exit 1
fi

# √âTAPE 6: V√©rification et application des migrations
print_step "√âTAPE 6: Migrations de base de donn√©es"

print_status "V√©rification du statut des migrations..."
php artisan migrate:status || print_warning "Impossible de v√©rifier le statut des migrations"

print_status "Application des migrations manquantes..."
php artisan migrate --force

if [ $? -eq 0 ]; then
    print_success "Migrations appliqu√©es avec succ√®s"
else
    print_warning "Probl√®me avec les migrations - continuons..."
fi

# √âTAPE 7: V√©rification des permissions
print_step "√âTAPE 7: V√©rification et correction des permissions"

print_status "Correction des permissions storage..."
chmod -R 755 storage
chmod -R 755 bootstrap/cache
print_success "Permissions corrig√©es"

print_status "V√©rification des r√©pertoires critiques..."
ls -la storage/
ls -la bootstrap/cache/

# √âTAPE 8: R√©installation des d√©pendances
print_step "√âTAPE 8: R√©installation des d√©pendances"

print_status "R√©installation des d√©pendances Composer..."
composer install --no-dev --optimize-autoloader --no-interaction

if [ $? -eq 0 ]; then
    print_success "D√©pendances Composer r√©install√©es"
else
    print_warning "Probl√®me avec Composer - continuons..."
fi

# √âTAPE 9: G√©n√©ration de la cl√© d'application
print_step "√âTAPE 9: G√©n√©ration de la cl√© d'application"

if grep -q "^APP_KEY=$" .env; then
    print_status "G√©n√©ration de la cl√© d'application..."
    php artisan key:generate --force
    print_success "Cl√© d'application g√©n√©r√©e"
else
    print_status "Cl√© d'application d√©j√† pr√©sente"
fi

# √âTAPE 10: Optimisation pour production
print_step "√âTAPE 10: Optimisation pour production"

print_status "Cache de configuration..."
php artisan config:cache

print_status "Cache des routes..."
php artisan route:cache

print_status "Cache des vues..."
php artisan view:cache

print_success "Optimisations appliqu√©es"

# √âTAPE 11: Test de l'application
print_step "√âTAPE 11: Tests de validation"

print_status "Test des mod√®les principaux..."
php artisan tinker --execute="
try {
    echo 'Mod√®les disponibles:' . PHP_EOL;
    echo 'Users: ' . App\Models\User::count() . PHP_EOL;
    echo 'Application fonctionne correctement' . PHP_EOL;
} catch (Exception \$e) {
    echo 'Erreur mod√®les: ' . \$e->getMessage() . PHP_EOL;
}
"

# √âTAPE 12: V√©rification des logs
print_step "√âTAPE 12: V√©rification des logs"

print_status "Derni√®res erreurs Laravel (si pr√©sentes)..."
if [ -f "storage/logs/laravel.log" ]; then
    echo "--- DERNI√àRES ERREURS LARAVEL ---"
    tail -20 storage/logs/laravel.log | grep -E "(ERROR|CRITICAL|emergency)" || echo "Aucune erreur r√©cente trouv√©e"
else
    print_status "Aucun fichier de log Laravel trouv√©"
fi

# √âTAPE 13: D√©sactivation du debug (optionnel)
print_step "√âTAPE 13: S√©curisation (optionnel)"

echo
print_warning "IMPORTANT: Mode debug actuellement activ√©!"
echo "Pour d√©sactiver le debug en production, ex√©cutez:"
echo "sed -i 's/APP_DEBUG=true/APP_DEBUG=false/g' .env"
echo "php artisan config:cache"

# √âTAPE 14: R√©sum√© et prochaines √©tapes
print_step "√âTAPE 14: R√©sum√©"

echo
print_success "üéâ Script de correction termin√©!"
echo
print_status "Prochaines √©tapes:"
echo "1. Testez votre application dans le navigateur"
echo "2. Si l'erreur persiste, v√©rifiez les logs en temps r√©el:"
echo "   tail -f storage/logs/laravel.log"
echo "3. D√©sactivez le mode debug une fois le probl√®me r√©solu"
echo "4. Si probl√®me persistant, v√©rifiez les logs du serveur web"

echo
print_status "Informations de debug utiles:"
echo "- URL de l'application: \$(grep '^APP_URL=' .env | cut -d'=' -f2)"
echo "- Environnement: \$(grep '^APP_ENV=' .env | cut -d'=' -f2)"
echo "- Debug activ√©: \$(grep '^APP_DEBUG=' .env | cut -d'=' -f2)"
echo "- Base de donn√©es: \$(grep '^DB_CONNECTION=' .env | cut -d'=' -f2)"

echo
print_success "Script termin√© avec succ√®s ‚úÖ"